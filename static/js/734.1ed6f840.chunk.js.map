{"version":3,"file":"static/js/734.1ed6f840.chunk.js","mappings":"mLACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,YAAc,+B,mBCiBpL,EATmB,SAACA,GAChB,IAAMC,EAAI,UAAM,WAAaD,EAAME,IACnC,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCFtC,EAJgB,SAACN,GACb,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,Q,oBC6C7C,EAtCgB,SAACP,GAEb,IAAIQ,EAAQR,EAAMS,YAGlB,GAIIC,EAAAA,EAAAA,IAAoB,CACpBC,KAAM,WAJNC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MAKEC,GAAWC,EAAAA,EAAAA,MASjB,OACI,iBAAKb,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKI,EAAMS,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuBb,KAAMa,EAAEb,KAAMJ,GAAIiB,EAAEjB,IAA1BiB,EAAEjB,UAE/C,gBAAKC,UAAWC,EAAAA,SAAhB,SACKI,EAAMY,SAASF,KAAI,SAAAG,GAAC,OAAI,SAAC,EAAD,CAAoBd,KAAMc,EAAEd,MAAdc,EAAEnB,UAE7C,kBAAMoB,SAAUT,GAdoB,SAAC,GAAe,IAAdU,EAAa,EAAbA,QAE1CR,GAASS,EAAAA,EAAAA,GAA4BD,IACrCT,OAW4CX,UAAWC,EAAAA,YAAnD,WACI,+BAAcQ,EAAS,cACvB,mBAAQa,KAAM,SAAd,iC,oDCtCVC,EAAkB,SAAClB,GACrB,MAAO,CACHmB,OAAQnB,EAAMoB,KAAKD,SCC3B,IAqBA,GAAeE,EAAAA,EAAAA,KDlBR,SAA6BC,GAShC,OAFiCC,EAAAA,EAAAA,IAAQL,EAARK,EANjC,SAA2B/B,GACvB,IAAK2B,EAAwB3B,EAAxB2B,OAAWK,GAAhB,OAA6BhC,EAA7B,GACA,OAAK2B,GACE,SAACG,GAAD,UAAeE,KADF,SAAC,KAAD,CAAU3B,GAAI,iBCemB0B,EAAAA,EAAAA,KArBrC,SAACvB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAWA,SAACM,GACxB,MAAO,CACHkB,cAAe,SAACC,GACZnB,GAASS,EAAAA,EAAAA,GAA4BU,SAKjD,CAA2GC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__8Qqqm\",\"dialogs_item\":\"Dialogs_dialogs_item__qlEBr\",\"active\":\"Dialogs_active__ZtgpO\",\"messages\":\"Dialogs_messages__9IDHC\",\"sendMessage\":\"Dialogs_sendMessage__NHVJP\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nconst DialogItem = (props: DialogPropsType) => {\r\n    const path = `${/messages/}${props.id}`\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import s from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.text}</div>\r\n}\r\n\r\nexport default Message","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsType} from \"./DialogsContainer\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {useAppDispatch} from \"../redux/redux-store\";\r\nimport {sendNewMessageActionCreator} from \"../redux/dialogsReducer\";\r\n\r\n\r\ntype FormValues = {\r\n    message: string\r\n};\r\n\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n\r\n    const {\r\n        register, //позволяет регистрировать различные поля для формы\r\n        handleSubmit,  //обертка над нашим кастомным хэндлером отправки формы. позволяет сделать то, что например связано с валидацией\r\n        reset\r\n    } = useForm<FormValues>({\r\n        mode: \"onBlur\"\r\n    })\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = ({message}) => {\r\n        // alert(JSON.stringify(data))\r\n        dispatch(sendNewMessageActionCreator(message))\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_item}>\r\n                {state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {state.messages.map(m => <Message key={m.id} text={m.text}/>)}\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={s.sendMessage}>\r\n                <textarea {...register('message')}/>\r\n                <button type={'submit'}>Send message</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToProps) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendNewMessageActionCreator} from \"../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToProps = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    onSendMessage: (newMessageBody: string ) => void\r\n}\r\n\r\nexport type DialogsType = MapStateToProps & MapDispatchPropsType\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        onSendMessage: (newMessageBody: string) => {\r\n            dispatch(sendNewMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect,connect(mapStateToProps, mapDispatchToProps))(Dialogs)"],"names":["props","path","id","className","s","to","name","text","state","dialogsPage","useForm","mode","register","handleSubmit","reset","dispatch","useAppDispatch","dialogs","map","d","messages","m","onSubmit","message","sendNewMessageActionCreator","type","mapStateToProps","isAuth","auth","compose","Component","connect","restProps","onSendMessage","newMessageBody","Dialogs"],"sourceRoot":""}