{"version":3,"file":"static/js/445.2fc6d4e1.chunk.js","mappings":"qOACA,EAAiC,oCAAjC,EAA+E,6B,kBCsC/E,EA/B+B,SAACA,GAC5B,OAA4BC,EAAAA,EAAAA,UAASD,EAAME,QAA3C,eAAOA,EAAP,KAAeC,EAAf,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACNH,EAAUH,EAAME,UACjB,CAACF,EAAME,SAeV,OAAO,yBACDE,GAGE,0BAAK,kBAAOG,WAAS,EAACC,OAbH,WACvBH,GAAY,GACZH,GAAUF,EAAMS,iBAAiBP,IAWqBQ,SARnC,SAACC,GACpBR,EAAUQ,EAAEC,cAAcC,QAQVA,MAAOX,OAHnB,0BAAK,iBAAMY,cAfM,WACrBT,GAAY,IAcH,SAAwCH,GAAU,kBCTnE,EAhBqB,SAACF,GAClB,OAAKA,EAAMe,SAIP,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKlB,EAAMe,QAAQI,OAAOC,MAAOC,IAAK,WAC3C,iBAAKL,UAAWC,EAAhB,WACI,yBAAMjB,EAAMe,QAAQO,YACpB,SAAC,EAAD,CAAwBpB,OAAQF,EAAME,OAAQO,iBAAkBT,EAAMS,0BAPvE,SAACc,EAAA,EAAD,KCPf,EAAkC,iC,UCAlC,EAAwB,uBAAxB,EAAwD,wBCAxD,EAAuB,mBCiBvB,EAVa,SAACvB,GACV,OACI,iBAAKgB,UAAWC,EAAhB,WAAwB,gBACpBC,IAAK,wGACJlB,EAAMwB,SACP,oCAAYxB,EAAMyB,kB,UC4B9B,GA9BgBC,EAAAA,EAAAA,OAAK,SAAC1B,GAClB2B,QAAQC,IAAI,UACZ,OAIIC,EAAAA,EAAAA,IAAoB,CACpBC,KAAM,WAJNC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MAUJ,OACI,iBAAKjB,UAAWC,EAAhB,sBACI,kBAAMiB,SAAUF,GAPoB,SAAC,GAAmB,IAAlBG,EAAiB,EAAjBA,YAC1CnC,EAAMoC,QAAQD,GACdF,OAKI,WACI,+BAAcF,EAAS,kBACvB,0BACI,mBAAQM,KAAM,SAAUrB,UAAWC,EAAnC,uBAKPjB,EAAMsC,MAAMC,KAAI,SAACC,GAAD,OAAiB,SAAC,EAAD,CAAiBhB,QAASgB,EAAEhB,QAASC,WAAYe,EAAEf,YAAxCe,EAAEC,a,SCF3D,GAFyBC,EAAAA,EAAAA,KAfD,SAACC,GACrB,MAAO,CACHL,MAAOK,EAAMC,YAAYN,MACzBvB,QAAS4B,EAAMC,YAAY7B,YAIR,SAAC8B,GACxB,MAAO,CACHT,QAAS,SAACD,GACNU,GAASC,EAAAA,EAAAA,IAAwBX,QAKpBO,CAA6CK,GCTtE,EAXgB,SAAC/C,GACb,OACI,iBAAKgB,UAAWC,EAAhB,WACI,SAAC,EAAD,CAAaF,QAASf,EAAMe,QAASb,OAAQF,EAAME,OAAQO,iBAAkBT,EAAMS,oBAGnF,SAAC,EAAD,Q,oBCHNuC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAoBD,OApBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MACF,WACI,IAAIC,EAA0BC,KAAKlD,MAAMmD,MAAMC,OAAOH,OACjDA,IAEDA,EAASC,KAAKlD,MAAMiD,SAEhBC,KAAKlD,MAAMqD,QAAQC,KAAK,UAIhCJ,KAAKlD,MAAMuD,gBAAgBN,GAC3BC,KAAKlD,MAAMwD,WAAWP,KACzB,oBAED,WACI,OAAO,SAAC,GAAD,kBAAaC,KAAKlD,OAAlB,IACSe,QAASmC,KAAKlD,MAAMe,QACpBb,OAAQgD,KAAKlD,MAAME,OACnBO,iBAAkByC,KAAKlD,MAAMS,wBAChD,EApBCuC,CAAyBS,EAAAA,WAyE/B,GAAeC,EAAAA,EAAAA,KACXhB,EAAAA,EAAAA,KAToB,SAACC,GACrB,MAAO,CACH5B,QAAS4B,EAAMC,YAAY7B,QAC3Bb,OAAQyC,EAAMC,YAAY1C,OAC1B+C,OAAQN,EAAMgB,KAAKlB,MAKE,CAACc,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAW/C,iBAAAA,EAAAA,KACrDmD,EAAAA,GAFJ,CAGEZ","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileWrapper\":\"ProfileInfo_profileWrapper__xlfj-\",\"aboutMe\":\"ProfileInfo_aboutMe__95Tup\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\ntype ProfileStatusType = {\r\n    status?: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    const [status, setStatus] = useState(props.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        status && props.updateUserStatus(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode ?\r\n            <div><span onDoubleClick={activateEditMode}>{status || '--------'}</span>\r\n            </div> :\r\n            <div><input autoFocus onBlur={deActivateEditMode} onChange={onChangeStatus}\r\n                        value={status}/>\r\n            </div>}\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {ProfilePropsType} from '../Profile';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst  ProfileInfo = (props: ProfilePropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileWrapper}>\r\n            <img src={props.profile.photos.large} alt={'photo'}/>\r\n            <div className={s.aboutMe}>\r\n                <div>{props.profile.fullName}</div>\r\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"profile_wrapper\":\"Profile_profile_wrapper__qOh0D\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__w9DHX\",\"button\":\"MyPosts_button__P7ZNN\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__fpPtC\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}><img\r\n            src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCJgYe02fL4wiVJBhVyGy9_C8aBBQlViX7XQ&usqp=CAU'}/>\r\n            {props.message}\r\n            <div>likes {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {memo} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {PostType} from \"../../redux/profileReducer\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\n\r\ntype FormValues = {\r\n    newPostText: string\r\n};\r\n\r\nconst MyPosts = memo((props: MyPostsType) => {\r\n    console.log('RENDER')\r\n    const {\r\n        register, //позволяет регистрировать различные поля для формы\r\n        handleSubmit,  //обертка над нашим кастомным хэндлером отправки формы. позволяет сделать то, что например связано с валидацией\r\n        reset\r\n    } = useForm<FormValues>({\r\n        mode: \"onBlur\"\r\n    })\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = ({newPostText}) => {\r\n        props.addPost(newPostText)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts}>My Posts\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <textarea {...register('newPostText')} />\r\n                <div>\r\n                    <button type={'submit'} className={s.button}>Send\r\n                    </button>\r\n                </div>\r\n\r\n            </form>\r\n            {props.posts.map((p: PostType) => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addNewPostActionCreator, InitialStateType} from \"../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\n\r\ntype MapStatePropsType = InitialStateType\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    profile: ProfileType | null\r\n}\r\n\r\nexport type MyPostsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addNewPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status?: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile_wrapper}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            {/*<MyPostsContainer posts={props.profilePage.posts} dispatch={props.dispatch}*/}\r\n            {/*         newPostText={props.profilePage.newPostText}/>*/}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateUserStatus} from \"../redux/profileReducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilesType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId: string | number = this.props.match.params.userId\r\n        if (!userId) {\r\n            // return (+userId === 2)\r\n            userId = this.props.userId\r\n            if(!userId){ //можно и так делать редирект (через history.push)\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(+userId)\r\n        this.props.getStatus(+userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateUserStatus={this.props.updateUserStatus}/>\r\n    }\r\n\r\n}\r\n\r\ntype MapStateType = {\r\n    profile: ProfileType | null\r\n    status: string | undefined\r\n    userId: number\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: PhotosType\r\n    userId: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: null\r\n    twitter: string\r\n    vk: string\r\n    website: null\r\n    youtube: null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\ntype ProfilesType = MapStateType & MapDispatchType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userId: state.auth.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateUserStatus}),\r\n    withRouter\r\n)(ProfileContainer)"],"names":["props","useState","status","setStatus","editMode","setEditMode","useEffect","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","value","onDoubleClick","profile","className","s","src","photos","large","alt","fullName","Preloader","message","likesCount","memo","console","log","useForm","mode","register","handleSubmit","reset","onSubmit","newPostText","addPost","type","posts","map","p","id","connect","state","profilePage","dispatch","addNewPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getStatus","React","compose","auth","withRouter"],"sourceRoot":""}